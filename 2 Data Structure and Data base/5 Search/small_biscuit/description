B. No.2 饼干管理
Time limit: 1000 ms

Memory limit: 256 MB

Standard I/O

你的面前有一排小饼干盒。

你想知道饼干第k多的饼干盒里有多少块小饼干，并且在你的大量操作后，还还能剩下多少饼干盒。

优秀的饼干管理者可以获得这次上机部分分数的奖励。

饼干盒共有n个，而你想要进行m次操作。

每次操作有三种可能：

1.询问饼干第k多的饼干盒里的饼干数。
2.从一个固定编号的饼干盒里取出一些小饼干。注意如果你想取出的饼干数量不小于目前饼干盒里有的饼干数量，你会选择把饼干取空并且扔掉饼干盒。因此不会有从已经空了的饼干盒里取饼干的这种操作。
3.向一个固定编号的饼干盒里添加若干小饼干。注意因为在取空饼干盒的时候，空盒子已经被扔掉了，所以也不会有向空饼干盒里添加饼干这种操作。

Input Description
第一行为一个正整数n，代表初始饼干盒的数量。

接下来一行有n个正整数，分别代表编号为1...n的饼干盒里初始小饼干的数量。

第三行为一个正整数m，代表你要进行m次操作。

接下来m行，每行为以下三种情况之一：

1.询问：首先是一个字母“Q”，然后是一个正整数k。代表询问饼干第k多的饼干盒里的饼干数。如果饼干盒已经不足k个，则输出-1。
2.取饼干：首先是一个字母“A”，然后是两个正整数a, b。代表试图从a号饼干盒取出b块饼干。注意如果取空盒子要扔掉盒子。
3.放饼干：首先是一个字母“C”，然后是两个正整数a, b。代表向a号饼干盒添加b块小饼干。

Output Description
对于每一次询问，输出一行一个正整数，代表此次查询饼干第k多的饼干盒里饼干的数量。

最后输出一行正整数，代表剩下的盒子数。

Sample
INPUT 

5
1 2 3 4 5
10
Q 2
A 4 6
C 1 4
Q 2
A 1 3
A 3 3
A 2 1
Q 4
C 2 10
Q 1
OUTPUT 

4
5
-1
11
3
Hint
初始状态有五盒小饼干，数量分别为1，2，3，4，5。

首先问第二多，为4。

从4号盒子取6个，向1号盒子添加4个。状态变为5，2，3，0，5。第4个盒子空了，扔掉。

再次问第二多，为5。

从1号，3号盒子各取3个，从2号盒子取1个。状态变为2，1，0，0，5。3号盒子也空了扔掉。

这次问第四多，但是饼干盒数量只有三个，输出-1。

向2号盒子添加10个。状态变为2，11，0，0，5。最多的盒子有11块小饼干。

最终剩下三个饼干盒。

其中30%的数据，n不超过3000，m不超过5000。
其中50%的数据，n不超过8000，m不超过10000。
其中70%的数据，初始状态及操作是随机生成的。
对于全部数据，n不超过30000，m不超过50000。

由于饼干盒实际上是某个外星文明出口的产品，所以可以容纳的饼干数量没有上限。但是由于你买不起太多饼干，所以保证饼干数不会溢出int范围。再次强调取放饼干不会对已经不存在的饼干盒进行操作。

我已经快要不认识饼干两个字了
